name: CI
on:
  pull_request:
    branches: [develop, main]
  push:
    branches: [develop, main]

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      SURGE_LOGIN: ${{ secrets.SURGE_LOGIN }}
      SURGE_TOKEN: ${{ secrets.SURGE_TOKEN }}
    steps:
      - uses: actions/checkout@v2
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Use NodeJS
        uses: actions/setup-node@v1
        with:
          node-version: '12.x'
      - run: yarn install --frozen-lockfile
      - run: yarn format:check
      - run: yarn test -- --coverage
        env:
          CI: true
      - name: Upload Test Coverage
        uses: actions/upload-artifact@v1
        with:
          name: code-coverage
          path: coverage
      - name: Build project
        if: github.event_name == 'push'
        run: yarn build
      - name: Upload Build Folder
        if: github.event_name == 'push'
        uses: actions/upload-artifact@v1
        with:
          name: build
          path: build
      # - uses: actions/download-artifacts
      - name: ZIP Assets
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          zip -r build.zip ./build
          zip -r coverage.zip ./coverage
      - name: Create a Release
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: npx semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.CUSTOM_TOKEN }}
      - name: Send a Release Slack message
        if: success() && github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: ./.github/actions/slack
        with: 
          slack_webhook: ${{ secrets.SLACK_WEBHOOK }}
          message: A new Release has been published
      - name: Deploy to Staging
        if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
        run: npx surge --project ./build --domain energetic-fan.surge.sh
      - name: Send a Staging Slack message
        if: success() && github.event_name == 'push' && github.ref == 'refs/heads/develop'
        uses: ./.github/actions/slack
        with: 
          slack_webhook: ${{ secrets.SLACK_WEBHOOK }}
          message: A new Staging version has been published
      - name: Deploy to Production
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        #  add code to deploy docker images
        run: echo "Deploying to production..."
      - name: Upload Coverage Reports
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: npx codecov
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
      - name: Open issue
        if: failure() && github.event_name == 'pull_request'
        # run: |
        #   curl --request POST \
        #   --url https://api.github.com/repos/${{ github.repository }}/issues \
        #   --header 'authorization: Bearer ${{ secrets.CUSTOM_TOKEN }}' \
        #   --header 'content-type: application/json' \
        #   --data '{
        #     "title": "Automated issue for commit: ${{ github.sha }}",
        #     "body": "This issue was automatically created by the GitHub Action workflow **${{ github.workflow }}**. \n\n The commit hash was: _${{ github.sha }}_."
        #     }',
        #     "assignees": ["${{
        #       github.event.pull_request.user.login
        #     }}"]
        uses: ../actions/issue
        id: issue
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          title: Test Issue
          body: Body
          assignees: |
            sherifmeimari
            sherifmemess
      - name: Send an issue Slack message
        if: success() && github.event_name == 'pull_request'
        uses: ./.github/actions/slack
        with: 
          slack_webhook: ${{ secrets.SLACK_WEBHOOK }}
          message: A new issue has been created on Github
        
